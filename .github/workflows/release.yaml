name: Release

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

on:
  push:
    branches:
      - 'main'
  workflow_dispatch:

env:
  APP_NAME: sdk
  NODE_VERSION: 22
  TAG_PREFIX: "@hautechai"

permissions:
  contents: write

jobs:
  version:
    runs-on: ubuntu-22.04
    name: Version packages
    outputs:
      release_created: ${{ steps.semantic.outputs.release_created }}
    steps:
      - uses: tibdex/github-app-token@v2
        id: generate_token
        with:
          app_id: ${{ secrets.BOT_APPLICATION_ID }}
          private_key: ${{ secrets.BOT_PRIVATE_KEY }}

      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Setup PNPM
        uses: pnpm/action-setup@v3
        with:
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4.4.0
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        env:
          HUSKY: 0

      - name: Prepare repository
        run: |
          git config user.email "admin@hautech.ai"
          git config user.name "Hautech Bot"

      - name: up version
        id: semantic
        run: |
          OUTPUT=$(pnpm run up-versions)

          echo $OUTPUT

          if echo "$OUTPUT" | grep -q "no new version is released"; then
            echo "release_created=false" >> $GITHUB_OUTPUT
          else
            echo "release_created=true" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ steps.generate_token.outputs.token }}

  publish:
    runs-on: ubuntu-22.04
    name: Publish
    needs: [version]
    if: (!contains(needs.version.result, 'failure') && needs.version.outputs.release_created == 'true' && always())
    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.6
        with:
          ref: ${{ github.sha }}
          fetch-depth: "0"

      - name: Get version
        id: version
        run: |
          git fetch --all --tags

          TAG=$(git tag --list "${{ env.TAG_PREFIX }}/${{ env.APP_NAME }}@*" | sort -V | tail -n 1 | awk -F'@' '{print $3}')

          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Build the package
        run: pnpm build

      - name: Publish the package
        run: |
          pnpm version from-git --no-commit-hooks --no-git-tag-version --allow-same-version
          pnpm publish --no-git-checks --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
