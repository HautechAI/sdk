import { describe, expect, it } from 'vitest';
import { createTestSdk } from '../test-utils';
import path from 'path';
import * as fs from 'node:fs';
import axios from 'axios';
import { LoraDtoStatus, PipelineDtoStatus } from '../../autogenerated/schemas';

describe('LoRA Operation E2E Tests', () => {
    const sdk = createTestSdk();

    it('should start a lora training operation and wait for status change', async () => {
        // Now use the uploaded file URL in the lora training operation
        const createdOperation = await sdk.operations.run.lora.training({
            input: {
                modelType: 'flux',
                input: {
                    input_images: 'https://hautech-public-dev.s3.us-east-1.amazonaws.com/dataset.zip',
                    training_steps: 100,
                },
            },
        });

        // wait should resolve once status changes from initial or reaches a terminal state
        const waited = await sdk.operations.wait(createdOperation, 120_000);
        expect(waited).toBeDefined();
        expect(waited.id).toBe(createdOperation.id);
        expect(typeof waited.status).toBe('string');

        // Also verify we can fetch it by id
        const got = await sdk.operations.get(createdOperation.id);
        expect(got).toBeDefined();
        expect(got!.id).toBe(createdOperation.id);
        expect(got!.status).toBe('finished');
    }, 120_000);

    it('should start a full naomi training operation and run naomi prediction inside pipeline', async () => {
        const filename = 'naomi-test-dataset.zip';

        const datasetPath = path.join(__dirname, 'assets', filename);
        const datasetBuffer = fs.readFileSync(datasetPath);

        // Initialize upload
        const init = await sdk.upload.initUpload({ filename });
        expect(init).toBeDefined();
        expect(typeof init.key).toBe('string');
        expect(typeof init.uploadUrl).toBe('string');

        // Upload the zip file
        const putResp = await axios.put(init.uploadUrl, datasetBuffer, {
            headers: {
                'Content-Type': 'application/zip',
            },
            maxBodyLength: Infinity,
        });
        expect(putResp.status).toBeGreaterThanOrEqual(200);
        expect(putResp.status).toBeLessThan(300);

        // Get the uploaded file URL
        const { url } = await sdk.upload.getUploadedFileUrl({ key: init.key });
        expect(url).toBeDefined();
        expect(typeof url).toBe('string');

        // ----- POSE -----
        const poseImagePath = path.join(__dirname, 'assets', 'pose.png');
        const pose = await sdk.images.createFromFile(poseImagePath);

        // ----- GARMENT -----
        const garmentImagePath = path.join(__dirname, 'assets', 'garment.png');
        const garment = await sdk.images.createFromFile(garmentImagePath);

        const pipelineData = sdk.pipelines.constructTemplate((pipeline) => {
            const estimationTask = pipeline.defer.operations.run.poseEstimation.v1({
                input: {
                    imageId: pose.id,
                },
            });
            const awaitedEstimationTask = pipeline.defer.operations.wait(estimationTask.result);

            const trainNaomiTask = pipeline.defer.operations.run.lora.training({
                input: {
                    modelType: 'naomi',
                    input: {
                        // zip_file: pipeline.inputRef.imagesUrl,
                        zip_file: 'https://hautech-public-dev.s3.us-east-1.amazonaws.com/armani.zip',
                        epochs: 1,
                    },
                },
            });

            const awaitedTrainNaomiTask = pipeline.defer.operations.wait(trainNaomiTask.result);

            const naomiTask = pipeline.defer.operations.run.haute.naomi.v1({
                input: {
                    prompt: 'Test prompt for Naomi',
                    mode: 'apparel_to_model',
                    category: 'upper_body',
                    garmentImageId: garment.id,
                    poseId: awaitedEstimationTask.result.output.data.poseId,
                    seed: 999,
                    extraLoraUrls: [awaitedTrainNaomiTask.result.output.data.weightsUrl!],
                },
            });
            const awaitedNaomiTask = pipeline.defer.operations.wait(naomiTask.result);

            pipeline.output = awaitedNaomiTask.result.output.imageId;

            return pipeline;
        });

        pipelineData.input = {
            imagesUrl: url,
        };

        // Create the pipeline using the API
        const createdPipeline = await sdk.pipelines.createFromTemplate(pipelineData);

        expect(createdPipeline).toBeDefined();
        expect(createdPipeline.id).toBeDefined();

        // Wait for the pipeline to complete
        const completedPipeline = await sdk.pipelines.wait(createdPipeline, 600_000);

        expect(completedPipeline).toBeDefined();
        expect(completedPipeline.id).toBe(createdPipeline.id);
        expect(completedPipeline.status).toBe(PipelineDtoStatus.completed);
        expect(completedPipeline.output).toBeDefined();
        expect(completedPipeline.output).to.a('string');
    }, 600_000);
});
