import { beforeAll, describe, expect, it } from 'vitest';
import { createTestSdk } from '../test-utils';
import { v4 } from 'uuid';
import {
    AddAccountToGroupControllerParamsDtoRole,
    RemoveAccountFromGroupControllerParamsDtoRole,
} from '../../autogenerated/schemas';

describe('Groups API E2E Tests', () => {
    let sdk = createTestSdk();
    let createdGroupId: string;
    let testAccountId: string;

    beforeAll(async () => {
        const group = await sdk.groups.create();
        createdGroupId = group.id;

        const account = await sdk.accounts.create({
            alias: v4(),
        });

        testAccountId = account.id;
    });

    describe('Groups CRUD Operations', () => {
        it('should create a new group', async () => {
            const result = await sdk.groups.create();
            expect(result).toBeDefined();
            expect(result.id).toBeDefined();
            expect(result.createdAt).toBeDefined();

            expect(result.id).not.toBe(createdGroupId);
        });

        it('should get a specific group', async () => {
            expect(createdGroupId).toBeDefined();

            const result = await sdk.groups.get(createdGroupId);
            expect(result).toBeDefined();
            expect(result!.id).toBe(createdGroupId);
            expect(result!.createdAt).toBeDefined();
        });

        it('should get a non-existent group', async () => {
            const result = await sdk.groups.get(v4());
            expect(result).toBeNull();
        });

        it('should delete a group', async () => {
            // Create a group to delete
            const groupToDelete = await sdk.groups.create();
            expect(groupToDelete).toBeDefined();

            // Delete the group
            await sdk.groups.delete(groupToDelete.id);

            // Verify it's deleted by trying to get it
            const deletedGroup = await sdk.groups.get(groupToDelete.id);
            expect(deletedGroup).toBeNull();
        });
    });

    describe('Groups Account Management', () => {
        it('should add and remove an account from a group', async () => {
            expect(createdGroupId).toBeDefined();
            expect(testAccountId).toBeDefined();

            // First add the account
            await sdk.groups.accounts.add(createdGroupId, {
                accountId: testAccountId,
                role: AddAccountToGroupControllerParamsDtoRole.member,
            });

            // Then remove it
            await sdk.groups.accounts.remove(createdGroupId, {
                accountId: testAccountId,
                role: RemoveAccountFromGroupControllerParamsDtoRole.member,
            });

            // The operation should complete without throwing an error
            expect(true).toBe(true);
        });

        it('should add an account with owner role', async () => {
            expect(createdGroupId).toBeDefined();
            expect(testAccountId).toBeDefined();

            await sdk.groups.accounts.add(createdGroupId, {
                accountId: testAccountId,
                role: AddAccountToGroupControllerParamsDtoRole.owner,
            });

            // The operation should complete without throwing an error
            expect(true).toBe(true);
        });

        it('should remove an account with owner role', async () => {
            expect(createdGroupId).toBeDefined();
            expect(testAccountId).toBeDefined();

            // Remove the owner account
            await sdk.groups.accounts.remove(createdGroupId, {
                accountId: testAccountId,
                role: RemoveAccountFromGroupControllerParamsDtoRole.owner,
            });

            // The operation should complete without throwing an error
            expect(true).toBe(true);
        });
    });

    describe('Error Handling', () => {
        it('should handle invalid group ID gracefully', async () => {
            const invalidId = 'non-existent-group-id';

            try {
                await sdk.groups.delete(invalidId);
                expect(true).toBe(false); // Should not reach here
            } catch (error) {
                expect(error).toBeDefined();
            }
        });

        it('should handle invalid account operations gracefully', async () => {
            const invalidAccountId = 'non-existent-account-id';
            const invalidGroupId = 'non-existent-group-id';

            try {
                await sdk.groups.accounts.add(invalidGroupId, {
                    accountId: invalidAccountId,
                    role: AddAccountToGroupControllerParamsDtoRole.member,
                });
                expect(true).toBe(false); // Should not reach here
            } catch (error) {
                expect(error).toBeDefined();
            }
        });
    });
});
