import { describe, expect, it } from 'vitest';
import { createTestSdk } from '../test-utils';
import path from 'path';
import { PipelineDtoStatus } from '../../autogenerated/schemas';

describe('Naomi Operation E2E Tests', () => {
    const sdk = createTestSdk();

    it('should start a full naomi training operation and run naomi prediction inside pipeline', async () => {
        // Upload garment image for dataset
        const garmentImagePath = path.join(__dirname, 'assets', 'garment.png');
        const garmentImage = await sdk.images.createFromFile(garmentImagePath);

        // Upload output image for dataset
        const outputImagePath = path.join(__dirname, 'assets', 'pose.png'); // Using pose.png as output example
        const outputImage = await sdk.images.createFromFile(outputImagePath);

        const poseImagePath = path.join(__dirname, 'assets', 'pose.png');
        const poseImage = await sdk.images.createFromFile(poseImagePath);

        const pipelineData = sdk.pipelines.constructTemplate((pipeline) => {
            const estimationTask = pipeline.defer.operations.run.poseEstimation.v1({
                input: {
                    imageId: poseImage.id,
                },
            });
            const awaitedEstimationTask = pipeline.defer.operations.wait(estimationTask.result);

            const prepareDatasetTask = pipeline.defer.operations.run.haute.naomi.prepare_dataset.v1({
                input: {
                    data: [
                        {
                            garmentImageId: garmentImage.id,
                            outputImageId: outputImage.id,
                            prompt: 'Test garment for Naomi training',
                            category: 'upper_body',
                        },
                    ],
                    returnStream: true,
                },
            });
            const awaitedPrepareDatasetTask = pipeline.defer.operations.wait(prepareDatasetTask.result);

            const trainNaomiTask = pipeline.defer.operations.run.haute.naomi.train.v1({
                input: {
                    datasetFileId: awaitedPrepareDatasetTask.result.output.data.fileId,
                    epochs: 1,
                },
            });

            const awaitedTrainNaomiTask = pipeline.defer.operations.wait(trainNaomiTask.result);

            const naomiTask = pipeline.defer.operations.run.haute.naomi.v1({
                input: {
                    prompt: 'Test prompt for Naomi',
                    mode: 'apparel_to_model',
                    category: 'upper_body',
                    garmentImageId: garmentImage.id,
                    poseId: awaitedEstimationTask.result.output.data.poseId,
                    seed: 999,
                    loraIds: [awaitedTrainNaomiTask.result.output.data.loraId],
                },
            });
            const awaitedNaomiTask = pipeline.defer.operations.wait(naomiTask.result);

            pipeline.setOutputRef(awaitedNaomiTask.result.output.imageId);

            return pipeline;
        });

        // Create the pipeline using the API
        const createdPipeline = await sdk.pipelines.createFromTemplate(pipelineData);

        expect(createdPipeline).toBeDefined();
        expect(createdPipeline.id).toBeDefined();
        console.log(createdPipeline.id);

        // Wait for the pipeline to complete
        const completedPipeline = await sdk.pipelines.wait(createdPipeline, 600_000);

        expect(completedPipeline).toBeDefined();
        expect(completedPipeline.id).toBe(createdPipeline.id);
        expect(completedPipeline.status).toBe(PipelineDtoStatus.completed);
        expect(completedPipeline.output).toBeDefined();
        expect(completedPipeline.output).to.a('string');
    }, 600_000);
});
