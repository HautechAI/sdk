import { beforeAll, describe, expect, it } from 'vitest';
import { createTestSdk } from '../test-utils';
import { v4 } from 'uuid';
import {
    GrantAccessControllerParamsPrincipalType,
    ListAccessControllerGrantsDtoAccess,
} from '../../autogenerated/schemas';

describe('Access API E2E Tests', () => {
    let sdk = createTestSdk();
    let testAccountId: string;
    let testGroupId: string;
    let testResourceId: string;
    let parentResourceId: string;

    beforeAll(async () => {
        // Create test account for access operations
        const account = await sdk.accounts.create({
            alias: `test-access-${v4()}`,
        });
        testAccountId = account.id;

        // Create test group for access operations
        const group = await sdk.groups.create();
        testGroupId = group.id;

        const collection = await sdk.collections.create({
            metadata: {},
        });

        const parentCollection = await sdk.collections.create({
            metadata: {},
        });

        testResourceId = collection.id;
        parentResourceId = parentCollection.id;
    });

    describe('Access Grant Operations', () => {
        it('should grant access to an account', async () => {
            const accessPermission = ListAccessControllerGrantsDtoAccess.reader;

            await sdk.access.grant(testResourceId, {
                principalType: GrantAccessControllerParamsPrincipalType.account,
                principalId: testAccountId,
                access: accessPermission,
            });

            // The operation should complete without throwing an error
            expect(true).toBe(true);
        });

        it('should grant access to a group', async () => {
            const accessPermission = ListAccessControllerGrantsDtoAccess.writer;

            await sdk.access.grant(testResourceId, {
                principalType: GrantAccessControllerParamsPrincipalType.group,
                principalId: testGroupId,
                access: accessPermission,
            });

            // The operation should complete without throwing an error
            expect(true).toBe(true);
        });

        it('should grant admin access to an account', async () => {
            const accessPermission = ListAccessControllerGrantsDtoAccess.owner;

            await sdk.access.grant(testResourceId, {
                principalType: GrantAccessControllerParamsPrincipalType.account,
                principalId: testAccountId,
                access: accessPermission,
            });

            // The operation should complete without throwing an error
            expect(true).toBe(true);
        });
    });

    describe('Access Revoke Operations', () => {
        it('should revoke access from an account', async () => {
            const accessPermission = ListAccessControllerGrantsDtoAccess.reader;

            await sdk.access.revoke(testResourceId, {
                principalType: GrantAccessControllerParamsPrincipalType.account,
                principalId: testAccountId,
                access: accessPermission,
            });

            // The operation should complete without throwing an error
            expect(true).toBe(true);
        });

        it('should revoke access from a group', async () => {
            const accessPermission = ListAccessControllerGrantsDtoAccess.writer;

            await sdk.access.revoke(testResourceId, {
                principalType: GrantAccessControllerParamsPrincipalType.group,
                principalId: testGroupId,
                access: accessPermission,
            });

            // The operation should complete without throwing an error
            expect(true).toBe(true);
        });

        it('should revoke admin access from an account', async () => {
            const accessPermission = ListAccessControllerGrantsDtoAccess.owner;

            await sdk.access.revoke(testResourceId, {
                principalType: GrantAccessControllerParamsPrincipalType.account,
                principalId: testAccountId,
                access: accessPermission,
            });

            // The operation should complete without throwing an error
            expect(true).toBe(true);
        });
    });

    describe('Access Attach Operations', () => {
        it('should attach access between resources', async () => {
            await sdk.access.attach(testResourceId, {
                parentResourceId: parentResourceId,
            });

            // The operation should complete without throwing an error
            expect(true).toBe(true);
        });
    });

    describe('Access Detach Operations', () => {
        it('should detach access between resources', async () => {
            await sdk.access.detach(testResourceId, {
                parentResourceId: parentResourceId,
            });

            // The operation should complete without throwing an error
            expect(true).toBe(true);
        });
    });

    describe('Access List Operations', () => {
        it('should list access for a resource', async () => {
            const result = await sdk.access.list(testResourceId);

            expect(result).toBeDefined();
            expect(result.attachments).toBeDefined();
            expect(Array.isArray(result.attachments)).toBe(true);
            expect(result.grants).toBeDefined();
            expect(Array.isArray(result.grants)).toBe(true);
        });
    });

    describe('Error Handling', () => {
        it('should handle invalid principal ID for grant', async () => {
            const invalidPrincipalId = 'invalid-principal-id';

            try {
                await sdk.access.grant(testResourceId, {
                    principalType: GrantAccessControllerParamsPrincipalType.account,
                    principalId: invalidPrincipalId,
                    access: ListAccessControllerGrantsDtoAccess.reader,
                });
                expect(true).toBe(false); // Should not reach here
            } catch (error) {
                expect(error).toBeDefined();
            }
        });

        it('should handle invalid access permission', async () => {
            const invalidAccess = 'invalid-permission';

            try {
                await sdk.access.grant(testResourceId, {
                    principalType: GrantAccessControllerParamsPrincipalType.account,
                    principalId: testAccountId,
                    // @ts-expect-error
                    access: invalidAccess,
                });
                expect(true).toBe(false); // Should not reach here
            } catch (error) {
                expect(error).toBeDefined();
            }
        });

        it('should handle empty resource ID', async () => {
            const emptyResourceId = '';

            try {
                await sdk.access.grant(emptyResourceId, {
                    principalType: GrantAccessControllerParamsPrincipalType.account,
                    principalId: testAccountId,
                    access: ListAccessControllerGrantsDtoAccess.reader,
                });
                expect(true).toBe(false); // Should not reach here
            } catch (error) {
                expect(error).toBeDefined();
            }
        });

        it('should handle empty principal ID', async () => {
            const emptyPrincipalId = '';

            try {
                await sdk.access.grant(testResourceId, {
                    principalType: GrantAccessControllerParamsPrincipalType.account,
                    principalId: emptyPrincipalId,
                    access: ListAccessControllerGrantsDtoAccess.reader,
                });
                expect(true).toBe(false); // Should not reach here
            } catch (error) {
                expect(error).toBeDefined();
            }
        });
    });

    describe('Principal Type Operations', () => {
        it('should handle account principal type', async () => {
            await sdk.access.grant(testResourceId, {
                principalType: GrantAccessControllerParamsPrincipalType.account,
                principalId: testAccountId,
                access: ListAccessControllerGrantsDtoAccess.reader,
            });

            // The operation should complete without throwing an error
            expect(true).toBe(true);
        });

        it('should handle group principal type', async () => {
            await sdk.access.grant(testResourceId, {
                principalType: GrantAccessControllerParamsPrincipalType.group,
                principalId: testGroupId,
                access: ListAccessControllerGrantsDtoAccess.reader,
            });

            // The operation should complete without throwing an error
            expect(true).toBe(true);
        });
    });
});
