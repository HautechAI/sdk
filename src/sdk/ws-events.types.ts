// WebSocket Event Type Definitions

import { OperationEntity, PipelineDto } from '../autogenerated/schemas';

// ------ EVENT MAP ------
export type WsEventMap = EntityEvents<
    'operation',
    OperationEntity,
    Pick<OperationEntity, 'id' | 'status' | 'creatorId' | 'createdAt' | 'updatedAt'>
> &
    EntityEvents<
        'pipeline',
        PipelineDto,
        Pick<PipelineDto, 'id' | 'status' | 'metadata' | 'creatorId' | 'createdAt' | 'updatedAt'>
    >;

// ------ END EVENT MAP ------

export type BaseWsEventType = 'created' | 'updated' | 'deleted';
export interface BaseWsEvent<T> {
    timestamp: string;
    data: T;
    type: BaseWsEventType;
}

type PreviewKey<E extends string> = `${E}:preview`;
type EntityKey<E extends string> = `${E}:${string}`;

type EntityEvents<E extends string, Full, Preview> = {
    [K in PreviewKey<E>]: BaseWsEvent<Preview>;
} & {
    [K in EntityKey<E>]: BaseWsEvent<Full>;
};

type BaseEntity<K extends string> = K extends `${infer E}:${string}` ? E : never;
export type WsEventEntity = BaseEntity<keyof WsEventMap & string>;

export type EntityEventKeys<E extends WsEventEntity> = Extract<keyof WsEventMap, `${E}:${string}`>;
export type EntityEventPayload<E extends WsEventEntity> = WsEventMap[EntityEventKeys<E>];

export type SubscribePayload = {
    entity: WsEventEntity;
    id: string;
};
