import { useApi, wrapCustomMethod } from '../../api-utils';
import { getLora } from '../../autogenerated/lora/lora';
import type { LoraDto, LoraDtoStatus } from '../../autogenerated/schemas';
import { SDK } from '../../types';

const waitLoraStatusChange = wrapCustomMethod(async function (
    this: any,
    lora: Pick<LoraDto, 'id' | 'status'>,
    timeoutMs = 120000,
): Promise<LoraDto> {
    const sdk: SDK = this;
    const initialStatus = lora.status;
    const deadline = Date.now() + timeoutMs;
    const delay = 3000;

    const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

    while (Date.now() < deadline) {
        const current = await sdk.lora.get(lora.id);
        if (!current) throw new Error('LoRA not found');

        if (current.status !== initialStatus || ['succeeded', 'failed', 'canceled'].includes(current.status)) {
            return current;
        }

        await sleep(delay);
    }

    throw new Error('LoRA wait timed out');
});

export const useLoraApi = () => {
    const hautechApi = getLora();

    return useApi({
        start: hautechApi.loraControllerStartV1,
        list: hautechApi.loraControllerListV1,
        get: hautechApi.loraControllerGetV1,
        wait: waitLoraStatusChange,
    });
};
