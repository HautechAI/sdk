import { useApi, wrapApiCallNullable, wrapCustomMethod } from '../../api-utils';
import { SDK } from '../../types';
import { OperationEntity, OperationEntityOutput } from '../../autogenerated/schemas';
import { getOperations } from '../../autogenerated/operations/operations';

const waitOperation = wrapCustomMethod(async function <
    O,
    T extends Omit<OperationEntity, 'output'> & { output: O extends unknown ? any : O },
>(this: any, operation: T, timeoutMs = 60000): Promise<T> {
    const deadline = Date.now() + timeoutMs;
    const delay = 1000;
    const sdk: SDK = this;

    const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));

    const poll = async (id: string) => {
        const op = await sdk.operations.get(id);
        if (!op) throw new Error('Operation not found');
        if (op.status !== 'pending') return op;
        return null;
    };

    while (Date.now() < deadline) {
        const result = await poll(operation.id);
        if (result) return result as T;
        await sleep(delay);
    }

    throw new Error('Operation timed out');
});

export const useOperationsApi = () => {
    const hautechApi = getOperations();

    return useApi({
        run: {
            animate: {
                kling_1_6_pro: {
                    v1: hautechApi.operationsControllerRunAnimateKling16ProV1V1,
                },
                kling_2_1: {
                    v1: hautechApi.operationsControllerRunAnimateKling21V1V1,
                },
                creatomate: {
                    v1: hautechApi.operationsControllerRunAnimateCreatomateV1V1,
                },
            },
            edit: {
                flux_kontext_dev: {
                    v1: hautechApi.operationsControllerRunEditFluxKontextDevV1V1,
                },
            },
            haute: {
                linda: {
                    v1: hautechApi.operationsControllerRunHauteLindaV1V1,
                },
                naomi: {
                    v1: hautechApi.operationsControllerRunHauteNaomiV1V1,
                },
            },
            ideogram: {
                character: {
                    v1: hautechApi.operationsControllerRunIdeogramCharacterV1V1,
                },
            },
            inpaint: {
                kate: {
                    v1: hautechApi.operationsControllerRunInpaintKateV1V1,
                },
            },
            gpt: {
                v1: hautechApi.operationsControllerRunGptV1V1,
                v2: hautechApi.operationsControllerRunGptV2V1,
            },
            math: {
                v1: hautechApi.operationsControllerRunMathV1V1,
            },
            translate: {
                v1: hautechApi.operationsControllerRunTranslateV1V1,
            },
            imagine: {
                kate: {
                    v1: hautechApi.operationsControllerRunImagineKateV1V1,
                },
            },
            upscale: {
                v1: hautechApi.operationsControllerRunUpscaleV1V1,
            },
            objectDetection: {
                v1: hautechApi.operationsControllerRunObjectDetectionV1V1,
            },
            segmentAnything: {
                embeddings: {
                    v1: hautechApi.operationsControllerRunSegmentAnythingEmbeddingsV1V1,
                },
                mask: {
                    v1: hautechApi.operationsControllerRunSegmentAnythingMaskV1V1,
                },
            },
            poseEstimation: {
                v1: hautechApi.operationsControllerRunPoseEstimationV1V1,
            },
            cut: {
                v1: hautechApi.operationsControllerRunCutV1V1,
            },
            crop: {
                v1: hautechApi.operationsControllerRunCropV1V1,
            },
            noise: {
                v1: hautechApi.operationsControllerRunNoiseV1V1,
            },
            contrast: {
                v1: hautechApi.operationsControllerRunContrastV1V1,
            },
            composite: {
                v1: hautechApi.operationsControllerRunCompositeV1V1,
            },
            vton: {
                gisele: {
                    v1: hautechApi.operationsControllerRunVtonGiseleV1V1,
                },
            },
            negateImage: {
                v1: hautechApi.operationsControllerRunNegateImageV1V1,
            },
            resize: {
                v1: hautechApi.operationsControllerRunResizeV1V1,
            },
            strings: {
                template: {
                    v1: hautechApi.operationsControllerRunStringsTemplateV1V1,
                },
            },
            onecompiler: {
                v1: hautechApi.operationsControllerRunOnecompilerV1V1,
            },
            pipelineMap: {
                v1: hautechApi.operationsControllerRunPipelineMapV1V1,
            },
            echo: {
                v1: hautechApi.operationsControllerRunEchoV1V1,
            },
        },
        get: wrapApiCallNullable(hautechApi.operationsControllerGetOperationV1),
        getMany: hautechApi.operationsControllerGetOperationsV1,
        list: hautechApi.operationsControllerListOperationsV1,
        updateMetadata: hautechApi.operationsControllerUpdateMetadataV1,
        wait: waitOperation,
    });
};
