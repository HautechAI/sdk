import { SDK } from '../../types';
import axios from 'axios';
import { CoreApi, useApi, wrapApiCallNullable } from '../../api-utils';
import { VideoEntity } from '../../autogenerated/schemas';

export const useVideosApi = (hautechApi: CoreApi) =>
    useApi({
        get: wrapApiCallNullable(hautechApi.videosControllerGetVideoByIdV1),
        list: hautechApi.videosControllerGetVideosV1,
        startUpload: hautechApi.videosControllerStartUploadV1,
        finalizeUpload: hautechApi.videosControllerFinalizeUploadV1,
        createFromFile: async function (
            this: any,
            file:
                | string
                | Blob
                | {
                      stream: NodeJS.ReadableStream;
                      filename: string;
                      contentType: string;
                  },
        ): Promise<VideoEntity> {
            const sdk: SDK = this;
            const uploadResult = await sdk.videos.startUpload();

            const isBrowser = typeof window !== 'undefined';

            let formData: any;

            if (isBrowser) {
                formData = new FormData();
            } else {
                const FormDataNode = require('form-data');
                formData = new FormDataNode();
            }

            if (typeof file === 'string') {
                if (isBrowser) throw new Error('Cannot use file path in browser');
                const fs = require('fs');
                formData.append('file', fs.createReadStream(file));
            } else if (isBrowser && file instanceof Blob) {
                formData.append('file', file);
            } else if (!(file instanceof Blob) && typeof file === 'object' && 'stream' in file) {
                formData.append('file', file.stream, {
                    filename: file.filename,
                    contentType: file.contentType,
                });
            } else {
                throw new Error('Unsupported file type');
            }

            const headers = isBrowser ? {} : formData.getHeaders();

            const uploadResponse = await axios.put(uploadResult.uploadUrl, formData, {
                headers,
                maxBodyLength: Infinity,
            });

            const fileToken = uploadResponse.data.fileToken;
            const finalizeResult = await sdk.videos.finalizeUpload({ fileToken });

            if (!finalizeResult?.id) {
                throw new Error('Failed to finalize video upload');
            }

            return finalizeResult;
        },
        createFromUrl: async function (this: any, fileUrl: string): Promise<VideoEntity> {
            const sdk: SDK = this;

            const isBrowser = typeof window !== 'undefined' && typeof Blob !== 'undefined';

            if (isBrowser) {
                const response = await axios.get(fileUrl, { responseType: 'blob', timeout: 30000 });
                const blob = new Blob([response.data], { type: response.headers['content-type'] });
                return sdk.videos.createFromFile(blob);
            } else {
                const response = await axios.get(fileUrl, { responseType: 'stream', timeout: 30000 });
                return sdk.videos.createFromFile({
                    stream: response.data,
                    filename: fileUrl.split('/').pop()!,
                    contentType: response.headers['content-type'] || 'application/octet-stream',
                });
            }
        },
    });
