import { useApi, wrapApiCallNullable, wrapCustomMethod } from '../../api-utils';
import {
    type CollectionsControllerListItemsV1Kind,
    CollectionsControllerListItemsV1Params,
    type ListCollectionItemsDto,
    type ResourceEntity,
} from '../../autogenerated/schemas';
import { SDK } from '../../types';
import { getCollections } from '../../autogenerated/collections/collections';

export const useCollectionsApi = () => {
    const hautechApi = getCollections();

    return useApi({
        create: hautechApi.collectionsControllerCreateCollectionV1,
        get: wrapApiCallNullable(hautechApi.collectionsControllerGetCollectionV1),
        list: hautechApi.collectionsControllerListCollectionsV1,
        updateMetadata: hautechApi.collectionsControllerUpdateMetadataV1,
        items: {
            add: hautechApi.collectionsControllerAddItemsV1,
            remove: hautechApi.collectionsControllerRemoveItemsV1,
            list: hautechApi.collectionsControllerListItemsV1,
            listByKind: wrapCustomMethod(async function <T extends ResourceEntity>(
                this: any,
                collectionId: string,
                kind: CollectionsControllerListItemsV1Kind,
                params?: Omit<CollectionsControllerListItemsV1Params, 'kind'>,
            ): Promise<Pick<ListCollectionItemsDto, 'pageInfo'> & { data: T[] }> {
                const sdk: SDK = this;

                const result = await sdk.collections.items.list(collectionId, {
                    ...params,
                    kind,
                });
                return {
                    pageInfo: result.pageInfo,
                    data: result.data as T[],
                };
            }),
        },
    });
};
