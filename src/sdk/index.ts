import access from './access';
import accounts from './accounts';
import balances from './balances';
import { SDKOptions } from '../types';
import collections from './collections';
import groups from './groups';
import images from './images';
import { decodeJwt } from 'jose';
import operations from './operations';
import pipelines from './pipelines';
import stacks from './stacks';
import storage from './storage';
import utils from './utils';
import { OperationsListener } from './listeners';
import { getAPI, getBaseUrl } from './api';
import { OperationsApi } from '../autogenerated';
import poses from './poses';
import videos from './videos';
import workflows from './workflows';

const replaceProtocol = (url: string, protocol: string) => {
    const parsed = new URL(url);
    parsed.protocol = protocol;
    return parsed.toString();
};

export const createSDK = (options: SDKOptions) => {
    let token: string | undefined = undefined;
    const authToken = async (): Promise<string> => {
        if (token) {
            const decoded = decodeJwt(token);
            const currentTime = Math.floor(Date.now() / 1000);
            if (decoded.exp && decoded.exp > currentTime) return token;
        }

        token = await options.authToken();
        return token;
    };
    const optionsWithTokenRefresher = { ...options, authToken };
    const operationsListener = new OperationsListener({
        ws:
            (options.useWebsocket ?? true)
                ? {
                      endpoint: (() => {
                          const baseUrl = getBaseUrl(options);
                          return replaceProtocol(baseUrl, baseUrl.startsWith('https') ? 'wss' : 'ws');
                      })(),
                      token: authToken,
                  }
                : null,
        // TODO: Refactor the API initialization
        operations: () => getAPI(OperationsApi, optionsWithTokenRefresher),
        allowPollingFallback: options.allowPollingFallback ?? true,
    });

    operationsListener.subscribe();

    return {
        access: access(optionsWithTokenRefresher),
        accounts: accounts(optionsWithTokenRefresher),
        balances: balances(optionsWithTokenRefresher),
        collections: collections(optionsWithTokenRefresher),
        groups: groups(optionsWithTokenRefresher),
        images: images(optionsWithTokenRefresher),
        videos: videos(optionsWithTokenRefresher),
        operations: operations(optionsWithTokenRefresher, operationsListener),
        pipelines: pipelines(optionsWithTokenRefresher),
        workflows: workflows(optionsWithTokenRefresher),
        stacks: stacks(optionsWithTokenRefresher),
        storage: storage(optionsWithTokenRefresher),
        utils: utils(optionsWithTokenRefresher),
        poses: poses(optionsWithTokenRefresher),
        close: async () => {
            await operationsListener.close();
        },
    };
};
export type SDK = ReturnType<typeof createSDK>;

// Interfaces for extending the types of metadata.
export interface CollectionMetadata {}
export interface OperationMetadata {}
export interface PipelineMetadata {}
export interface StackMetadata {}
export interface PoseMetadata {}
export interface WorkflowMetadata {}
