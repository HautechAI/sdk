import { ListProps, ListResponse, SDKOptions } from '../../types';
import { StorageApi, WorkflowDto, WorkflowsApi } from '../../autogenerated';
import { useAutogeneratedAPI } from '../api';
import { AddMetadata } from '../utils';
import { WorkflowMetadata } from '..';

type WorkflowDtoWithMetadata = AddMetadata<WorkflowDto, WorkflowMetadata>;

const workflows = (options: SDKOptions) => {
    const api = useAutogeneratedAPI({ API: WorkflowsApi, options });
    return {
        create: async (props: {
            data: any;
            version: any;
            metadata?: WorkflowMetadata;
        }): Promise<WorkflowDtoWithMetadata> =>
            api.call({
                run: (methods) => methods.workflowsControllerCreateWorkflowV1(props),
            }),
        get: async (props: { id: string }): Promise<WorkflowDtoWithMetadata | undefined> =>
            api.callWithReturningUndefinedOn404({
                run: (methods) => methods.workflowsControllerGetWorkflowV1(props.id),
            }),
        list: (): Promise<ListResponse<WorkflowDtoWithMetadata>> =>
            api.call({
                run: (methods) => methods.workflowsControllerListWorkflowsV1(),
            }),
        update: async (props: {
            id: string;
            data: any;
            version: any;
            metadata?: Partial<WorkflowMetadata>;
        }): Promise<void> =>
            api.call({
                run: (methods) => methods.workflowsControllerUpdateWorkflowV1(props.id, props),
            }),
    };
};

export default workflows;
