import { AccountEntity, AccountsApi, ListAccountsDto, ListAccountsParamsDto } from '../../autogenerated';
import { ListResponse, SDKOptions } from '../../types';
import { useAutogeneratedAPI } from '../api';
import { transformToListResponse } from '../transformers';

const accounts = (options: SDKOptions) => {
    const api = useAutogeneratedAPI({ API: AccountsApi, options });
    return {
        create: async (props: { alias?: string } = {}): Promise<AccountEntity> =>
            api.call({
                run: (methods) => methods.accountsControllerCreateAccountV1({ alias: props.alias }),
            }),
        get: async (props: { id: string }): Promise<AccountEntity | undefined> =>
            api.callWithReturningUndefinedOn404({
                run: (methods) => methods.accountsControllerGetAccountV1(props.id),
            }),
        self: async (): Promise<AccountEntity | undefined> =>
            api.callWithReturningUndefinedOn404({
                run: (methods) => methods.accountsControllerGetSelfV1(),
            }),
        getByAlias: async (props: { alias: string }): Promise<AccountEntity | undefined> =>
            api.callWithReturningUndefinedOn404({
                run: (methods) => methods.accountsControllerGetAccountByAliasV1(props.alias),
            }),
        list: async (props: ListAccountsParamsDto = {}): Promise<ListResponse<AccountEntity>> =>
            api.call({
                run: (methods) => methods.accountsControllerListAccountsV1(props.orderBy, props.limit, props.cursor),
                transform: transformToListResponse,
            }),
    };
};

export default accounts;
