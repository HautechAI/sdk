import { describe, it, expect, vi, beforeEach } from 'vitest';
import { useApi } from './api';
import { Configuration } from './autogenerated';
import * as Autogenerated from './autogenerated';

// Mock the autogenerated module
vi.mock('./autogenerated', () => {
    const mockApiClasses = {
        BalancesApi: vi.fn(),
        Configuration: vi.fn(),
        BaseAPI: vi.fn(),
        anotherNonApiFunction: vi.fn(),
    };

    return mockApiClasses;
});

describe('useApi', () => {
    let mockOptions: { baseUrl: string; accessToken: string | Promise<string> };

    beforeEach(() => {
        vi.clearAllMocks();

        mockOptions = {
            baseUrl: 'https://test.api.com',
            accessToken: 'test-token',
        };
    });

    it('should create Configuration with correct parameters when endpoint is provided', async () => {
        await useApi(mockOptions);

        expect(Configuration).toHaveBeenCalledWith({
            basePath: 'https://test.api.com',
            accessToken: 'test-token',
        });
    });

    it('should handle async accessToken', async () => {
        const asyncToken = 'async-test-token';
        const optionsWithAsyncToken = {
            baseUrl: 'https://test.api.com',
            accessToken: Promise.resolve(asyncToken),
        };

        await useApi(optionsWithAsyncToken);

        expect(Configuration).toHaveBeenCalledWith({
            basePath: 'https://test.api.com',
            accessToken: Promise.resolve(asyncToken),
        });
    });

    it('should handle sync accessToken', async () => {
        const syncToken = 'sync-test-token';
        const optionsWithSyncToken = {
            baseUrl: 'https://test.api.com',
            accessToken: syncToken,
        };

        await useApi(optionsWithSyncToken);

        expect(Configuration).toHaveBeenCalledWith({
            basePath: 'https://test.api.com',
            accessToken: syncToken,
        });
    });

    it('should create instances of all API classes with correct naming', async () => {
        const api = await useApi(mockOptions);

        expect(Autogenerated.BalancesApi).toHaveBeenCalled();
        // @ts-expect-error
        expect(Autogenerated.anotherNonApiFunction).not.toHaveBeenCalled();

        // Check that API instances are available with correct lowercase names
        expect(api).toHaveProperty('balances');

        // Check that non-API properties are not included
        expect(api).not.toHaveProperty('configuration');
        expect(api).not.toHaveProperty('baseapi');
        expect(api).not.toHaveProperty('anothernonapifunction');
    });

    it('should pass configuration to all API constructors', async () => {
        await useApi(mockOptions);

        // Get the configuration instance that was created
        const configurationCall = (Configuration as any).mock.calls[0];
        const configurationInstance = (Configuration as any).mock.instances[0];

        // Check that all API constructors received the configuration
        expect(Autogenerated.BalancesApi).toHaveBeenCalledWith(configurationInstance);
    });
});
