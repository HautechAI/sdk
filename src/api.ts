import * as Autogenerated from './autogenerated';
import { Configuration } from './autogenerated';

type ExtractApiInstances<T> = {
    [K in keyof T as K extends `${infer Name}Api` ? Lowercase<Name> : never]: T[K] extends new (
        ...args: any[]
    ) => infer R
        ? R
        : never;
};

export type CoreApi = ExtractApiInstances<typeof Autogenerated>;

export const useApi = ({
    baseUrl,
    accessToken,
}: {
    baseUrl: string;
    accessToken: string | Promise<string>;
}): CoreApi => {
    const configuration = new Configuration({
        basePath: baseUrl,
        accessToken,
    });

    const api = {} as ExtractApiInstances<typeof Autogenerated>;

    for (const [key, value] of Object.entries(Autogenerated)) {
        if (typeof value === 'function' && key.endsWith('Api')) {
            const instanceName = key.replace(/Api$/, '').toLowerCase() as keyof typeof api;
            api[instanceName] = new (value as any)(configuration);
        }
    }

    return api;
};

export const wrapApiCall = <T extends (...args: any[]) => Promise<{ data: any }>>(fn: T) => {
    return (...args: Parameters<T>): Promise<Awaited<ReturnType<T>>['data']> => {
        return fn(...args).then((res) => res.data);
    };
};
