import { getHautechAPI } from './autogenerated';
import axios, { AxiosRequestConfig, AxiosResponse } from 'axios';
import { Config } from './config';

export type CoreApi = ReturnType<typeof getHautechAPI>;
export const api = getHautechAPI();

type WrappedApiFn<F> = F extends (...args: infer A) => Promise<AxiosResponse<infer R>>
    ? (...args: A) => Promise<R>
    : never;

type DeepWrap<T> = {
    [K in keyof T]: T[K] extends (...args: any[]) => Promise<AxiosResponse<any>>
        ? WrappedApiFn<T[K]>
        : T[K] extends object
          ? DeepWrap<T[K]>
          : T[K];
};

export const wrapApiCall = <Fn extends (...args: any[]) => Promise<AxiosResponse<any>>>(
    fn: Fn,
    config: Config,
): ((...args: Parameters<Fn>) => Promise<Awaited<ReturnType<Fn>> extends AxiosResponse<infer R> ? R : never>) => {
    return async (...args: any[]) => {
        const token = await config.authToken();

        const baseOptions = {
            baseURL: config.baseUrl,
            headers: {
                Authorization: `Bearer ${token}`,
            },
        };

        const lastParamIndex = fn.length - 1;
        const hasExplicitOptions = typeof args[lastParamIndex] === 'object' && args[lastParamIndex]?.headers;

        const finalArgs = [...args];

        if (hasExplicitOptions) {
            finalArgs[lastParamIndex] = {
                ...args[lastParamIndex],
                ...baseOptions,
                headers: {
                    ...(args[lastParamIndex]?.headers ?? {}),
                    Authorization: `Bearer ${token}`,
                },
            };
        } else {
            // fill in any missing args with undefined
            while (finalArgs.length < fn.length - 1) {
                finalArgs.push(undefined);
            }
            finalArgs.push(baseOptions);
        }

        const res = await fn(...finalArgs);
        return res.data;
    };
};

export const wrapApiCallDeep = <T>(obj: T, config: Config): DeepWrap<T> => {
    const isAxiosApiFn = (fn: any): fn is (...args: any[]) => Promise<AxiosResponse<any>> => typeof fn === 'function';

    if (isAxiosApiFn(obj)) {
        return wrapApiCall(obj, config) as any;
    }

    if (typeof obj === 'object' && obj !== null) {
        const entries = Object.entries(obj).map(([k, v]) => [k, wrapApiCallDeep(v, config)]);
        return Object.fromEntries(entries) as any;
    }

    return obj as any;
};

export const axiosMutator: <R>(
    config: AxiosRequestConfig,
    options?: AxiosRequestConfig,
) => Promise<AxiosResponse<R>> = async (config, options) => {
    return axios.request({ ...config, ...options });
};
